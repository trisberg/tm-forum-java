/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.21).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.sample.api;

import io.sample.model.CatalogBatchEvent;
import io.sample.model.CatalogCreateEvent;
import io.sample.model.CatalogDeleteEvent;
import io.sample.model.CategoryCreateEvent;
import io.sample.model.CategoryDeleteEvent;
import io.sample.model.Error;
import io.sample.model.EventSubscription;
import io.sample.model.ProductOfferingAttributeValueChangeEvent;
import io.sample.model.ProductOfferingCreateEvent;
import io.sample.model.ProductOfferingDeleteEvent;
import io.sample.model.ProductOfferingPriceAttributeValueChangeEvent;
import io.sample.model.ProductOfferingPriceCreateEvent;
import io.sample.model.ProductOfferingPriceDeleteEvent;
import io.sample.model.ProductOfferingPriceStateChangeEvent;
import io.sample.model.ProductOfferingStateChangeEvent;
import io.sample.model.ProductSpecificationCreateEvent;
import io.sample.model.ProductSpecificationDeleteEvent;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2021-09-28T13:08:23.907Z")

@Validated
@Api(value = "listener", description = "the listener API")
@RequestMapping(value = "/tmf-api/productCatalogManagement/v4/")
public interface ListenerApi {

    @ApiOperation(value = "Client listener for entity CatalogBatchEvent", nickname = "listenToCatalogBatchEvent", notes = "Example of a client listener for receiving the notification CatalogBatchEvent", response = EventSubscription.class, tags={ "notification listeners (client side)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Notified", response = EventSubscription.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/listener/catalogBatchEvent",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.POST)
    ResponseEntity<EventSubscription> listenToCatalogBatchEvent(@ApiParam(value = "The event data" ,required=true )  @Valid @RequestBody CatalogBatchEvent data);


    @ApiOperation(value = "Client listener for entity CatalogCreateEvent", nickname = "listenToCatalogCreateEvent", notes = "Example of a client listener for receiving the notification CatalogCreateEvent", response = EventSubscription.class, tags={ "notification listeners (client side)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Notified", response = EventSubscription.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/listener/catalogCreateEvent",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.POST)
    ResponseEntity<EventSubscription> listenToCatalogCreateEvent(@ApiParam(value = "The event data" ,required=true )  @Valid @RequestBody CatalogCreateEvent data);


    @ApiOperation(value = "Client listener for entity CatalogDeleteEvent", nickname = "listenToCatalogDeleteEvent", notes = "Example of a client listener for receiving the notification CatalogDeleteEvent", response = EventSubscription.class, tags={ "notification listeners (client side)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Notified", response = EventSubscription.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/listener/catalogDeleteEvent",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.POST)
    ResponseEntity<EventSubscription> listenToCatalogDeleteEvent(@ApiParam(value = "The event data" ,required=true )  @Valid @RequestBody CatalogDeleteEvent data);


    @ApiOperation(value = "Client listener for entity CategoryCreateEvent", nickname = "listenToCategoryCreateEvent", notes = "Example of a client listener for receiving the notification CategoryCreateEvent", response = EventSubscription.class, tags={ "notification listeners (client side)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Notified", response = EventSubscription.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/listener/categoryCreateEvent",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.POST)
    ResponseEntity<EventSubscription> listenToCategoryCreateEvent(@ApiParam(value = "The event data" ,required=true )  @Valid @RequestBody CategoryCreateEvent data);


    @ApiOperation(value = "Client listener for entity CategoryDeleteEvent", nickname = "listenToCategoryDeleteEvent", notes = "Example of a client listener for receiving the notification CategoryDeleteEvent", response = EventSubscription.class, tags={ "notification listeners (client side)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Notified", response = EventSubscription.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/listener/categoryDeleteEvent",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.POST)
    ResponseEntity<EventSubscription> listenToCategoryDeleteEvent(@ApiParam(value = "The event data" ,required=true )  @Valid @RequestBody CategoryDeleteEvent data);


    @ApiOperation(value = "Client listener for entity ProductOfferingAttributeValueChangeEvent", nickname = "listenToProductOfferingAttributeValueChangeEvent", notes = "Example of a client listener for receiving the notification ProductOfferingAttributeValueChangeEvent", response = EventSubscription.class, tags={ "notification listeners (client side)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Notified", response = EventSubscription.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/listener/productOfferingAttributeValueChangeEvent",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.POST)
    ResponseEntity<EventSubscription> listenToProductOfferingAttributeValueChangeEvent(@ApiParam(value = "The event data" ,required=true )  @Valid @RequestBody ProductOfferingAttributeValueChangeEvent data);


    @ApiOperation(value = "Client listener for entity ProductOfferingCreateEvent", nickname = "listenToProductOfferingCreateEvent", notes = "Example of a client listener for receiving the notification ProductOfferingCreateEvent", response = EventSubscription.class, tags={ "notification listeners (client side)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Notified", response = EventSubscription.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/listener/productOfferingCreateEvent",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.POST)
    ResponseEntity<EventSubscription> listenToProductOfferingCreateEvent(@ApiParam(value = "The event data" ,required=true )  @Valid @RequestBody ProductOfferingCreateEvent data);


    @ApiOperation(value = "Client listener for entity ProductOfferingDeleteEvent", nickname = "listenToProductOfferingDeleteEvent", notes = "Example of a client listener for receiving the notification ProductOfferingDeleteEvent", response = EventSubscription.class, tags={ "notification listeners (client side)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Notified", response = EventSubscription.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/listener/productOfferingDeleteEvent",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.POST)
    ResponseEntity<EventSubscription> listenToProductOfferingDeleteEvent(@ApiParam(value = "The event data" ,required=true )  @Valid @RequestBody ProductOfferingDeleteEvent data);


    @ApiOperation(value = "Client listener for entity ProductOfferingPriceAttributeValueChangeEvent", nickname = "listenToProductOfferingPriceAttributeValueChangeEvent", notes = "Example of a client listener for receiving the notification ProductOfferingPriceAttributeValueChangeEvent", response = EventSubscription.class, tags={ "notification listeners (client side)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Notified", response = EventSubscription.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/listener/productOfferingPriceAttributeValueChangeEvent",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.POST)
    ResponseEntity<EventSubscription> listenToProductOfferingPriceAttributeValueChangeEvent(@ApiParam(value = "The event data" ,required=true )  @Valid @RequestBody ProductOfferingPriceAttributeValueChangeEvent data);


    @ApiOperation(value = "Client listener for entity ProductOfferingPriceCreateEvent", nickname = "listenToProductOfferingPriceCreateEvent", notes = "Example of a client listener for receiving the notification ProductOfferingPriceCreateEvent", response = EventSubscription.class, tags={ "notification listeners (client side)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Notified", response = EventSubscription.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/listener/productOfferingPriceCreateEvent",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.POST)
    ResponseEntity<EventSubscription> listenToProductOfferingPriceCreateEvent(@ApiParam(value = "The event data" ,required=true )  @Valid @RequestBody ProductOfferingPriceCreateEvent data);


    @ApiOperation(value = "Client listener for entity ProductOfferingPriceDeleteEvent", nickname = "listenToProductOfferingPriceDeleteEvent", notes = "Example of a client listener for receiving the notification ProductOfferingPriceDeleteEvent", response = EventSubscription.class, tags={ "notification listeners (client side)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Notified", response = EventSubscription.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/listener/productOfferingPriceDeleteEvent",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.POST)
    ResponseEntity<EventSubscription> listenToProductOfferingPriceDeleteEvent(@ApiParam(value = "The event data" ,required=true )  @Valid @RequestBody ProductOfferingPriceDeleteEvent data);


    @ApiOperation(value = "Client listener for entity ProductOfferingPriceStateChangeEvent", nickname = "listenToProductOfferingPriceStateChangeEvent", notes = "Example of a client listener for receiving the notification ProductOfferingPriceStateChangeEvent", response = EventSubscription.class, tags={ "notification listeners (client side)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Notified", response = EventSubscription.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/listener/productOfferingPriceStateChangeEvent",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.POST)
    ResponseEntity<EventSubscription> listenToProductOfferingPriceStateChangeEvent(@ApiParam(value = "The event data" ,required=true )  @Valid @RequestBody ProductOfferingPriceStateChangeEvent data);


    @ApiOperation(value = "Client listener for entity ProductOfferingStateChangeEvent", nickname = "listenToProductOfferingStateChangeEvent", notes = "Example of a client listener for receiving the notification ProductOfferingStateChangeEvent", response = EventSubscription.class, tags={ "notification listeners (client side)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Notified", response = EventSubscription.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/listener/productOfferingStateChangeEvent",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.POST)
    ResponseEntity<EventSubscription> listenToProductOfferingStateChangeEvent(@ApiParam(value = "The event data" ,required=true )  @Valid @RequestBody ProductOfferingStateChangeEvent data);


    @ApiOperation(value = "Client listener for entity ProductSpecificationCreateEvent", nickname = "listenToProductSpecificationCreateEvent", notes = "Example of a client listener for receiving the notification ProductSpecificationCreateEvent", response = EventSubscription.class, tags={ "notification listeners (client side)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Notified", response = EventSubscription.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/listener/productSpecificationCreateEvent",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.POST)
    ResponseEntity<EventSubscription> listenToProductSpecificationCreateEvent(@ApiParam(value = "The event data" ,required=true )  @Valid @RequestBody ProductSpecificationCreateEvent data);


    @ApiOperation(value = "Client listener for entity ProductSpecificationDeleteEvent", nickname = "listenToProductSpecificationDeleteEvent", notes = "Example of a client listener for receiving the notification ProductSpecificationDeleteEvent", response = EventSubscription.class, tags={ "notification listeners (client side)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Notified", response = EventSubscription.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/listener/productSpecificationDeleteEvent",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.POST)
    ResponseEntity<EventSubscription> listenToProductSpecificationDeleteEvent(@ApiParam(value = "The event data" ,required=true )  @Valid @RequestBody ProductSpecificationDeleteEvent data);

}
